name: Create New Revision

# Trigger the workflow on push to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

# Set environment variables
env:
  PYTHON_VERSION: '3.11'
  REGISTRY: docker.io
  IMAGE_NAME: davidxu3/control-plane-api-demo
  PROJECT_ID: 'd6cee583-a32a-4342-a748-3dfc857ba964'  # Replace with your actual project ID

jobs:
  # Job 1: Run validation
  validate:
    if: false && (github.ref == 'refs/heads/main' || (github.event.pull_request.merged == true))
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.validation.outputs.deploy }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
    
    - name: Run validation
      id: validation
      run: |
        echo "‚úÖ Validation passed - proceeding with revision update"
        echo "deploy=true" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build and push Docker image
  build-and-push:
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=LangGraph AI Agent
          org.opencontainers.image.description=AI Agent built with LangGraph
          org.opencontainers.image.vendor=YourCompany
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
    
    - name: Output image details
      run: |
        echo "üê≥ Docker image built and pushed successfully!"
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"

  # Job 3: Update project revision
  update-revision:
    needs: [validate, build-and-push]
    if: success()
    runs-on: ubuntu-latest
    
    steps:
    - name: Update notification
      run: |
        echo "üîÑ Updating project revision..."
        echo "üì¶ Project ID: ${{ env.PROJECT_ID }}"
        echo "üöÄ New image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
    
    - name: Update LangChain project revision
      run: |
        echo "üîÑ Triggering revision update for project ${{ env.PROJECT_ID }}..."
        
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          https://gtm.smith.langchain.dev/api-host/v1/projects/${{ env.PROJECT_ID }}/revisions \
          --request POST \
          --header 'Content-Type: application/json' \
          --header 'X-Api-Key: ${{ secrets.LANGSMITH_API_KEY }}' \
          --data '{
            "image_path": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest",
            "env_vars": [{"name": "OPENAI_API_KEY", "value": "${{ secrets.OPENAI_API_KEY }}", "type": "secret"}]
          }')
        
        # Extract HTTP status and response body
        http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        response_body=$(echo $response | sed -e 's/HTTPSTATUS\:.*//g')
        
        # Check if revision update was successful
        if [ $http_status -eq 200 ] || [ $http_status -eq 201 ]; then
          echo "‚úÖ Project revision updated successfully!"
          echo "üìã Response: $response_body"
        else
          echo "‚ùå Project revision update failed with status: $http_status"
          echo "üìã Response: $response_body"
          exit 1
        fi
    
    - name: Success notification
      run: |
        echo "üéâ Revision update completed successfully!"
        echo "üì¶ Project: ${{ env.PROJECT_ID }}"
        echo "üöÄ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" 